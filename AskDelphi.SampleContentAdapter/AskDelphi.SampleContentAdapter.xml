<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AskDelphi.SampleContentAdapter</name>
    </assembly>
    <members>
        <member name="T:AskDelphi.SampleContentAdapter.Constants">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.APIVersion1">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.Success">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.Fail">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.ClaimTypeSystemID">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.ClaimTypeTenant">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.ClaimTypeProject">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.ErrorFailedCode">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.ErrorFailedMessage">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.ErrorInternal">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.ErrorInternalMessage">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.ErrorInvalidCredentialsCode">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.ErrorInvalidCredentialsMessage">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.ErrorNotSupportedCode">
            <summary></summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Constants.ErrorNotSupportedMessage">
            <summary></summary>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Controllers.AdminController">
            <summary>
            For interacting with resources.
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.AdminController.#ctor(Microsoft.Extensions.Logging.ILogger{AskDelphi.SampleContentAdapter.Controllers.ContentController})">
            <summary>
            
            </summary>    
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Controllers.AuthenticationController">
            <summary>
            AuthenticationController
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.AuthenticationController.#ctor(Microsoft.Extensions.Logging.ILogger{AskDelphi.SampleContentAdapter.Controllers.AuthenticationController},AskDelphi.SampleContentAdapter.Services.IAuthenticationService)">
            <summary>
            AuthenticationController
            </summary>
            <param name="logger"></param>
            <param name="authenticationService"></param>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.AuthenticationController.PostAuthLogin(AskDelphi.SampleContentAdapter.DTO.ClaimTuple[])">
            <summary>
            This method can be used to ‘log in’ to the adapter using the secret API key.
            </summary>
            <remarks>
            This method can be used to ‘log in’ to the adapter using the secret API key 
            that should only be known to systems that have access to the API.
            
            If claims are specified, the API may encode some details of the logged-in 
            user in the claims part of the returned JWT token.Having those details in
            there could allow other calls to this API to customize results based on the
            logged-in user’s authentication claims.
            
            A refresh token may be returned to allow an implementation to extend the
            lifetime of a JWT token. Supporting this functionality is entirely optional. 
            Functionally there is no need to support refresh tokens, as the caller should
            be able to use the login endpoint again to get a new token.
            
            The lifetime of the returned JWT token should be limited and should not
            exceed 60 minutes.
            
            JWT Tokens must comply with[RFC7519] and must include “aud”, “nbf” and 
            “exp” fields
            </remarks>
            <param name="claims">JSON-encoded array of tuples { "type": &lt;string>, "value": &lt;string> } 
            containing the claims of the currently logged-in user.The adapter
            that implements this function may use this to determine the user’s
            identity on the customer CMS.
            The caller of this API will always include a special claim of type
            http://tempuri.org/askdelphi/remote-system-id with a string value. 
            This special claim provides the system with an identification of itself
            inside the AskDelphi environment.
            If the content APIs need to return automatically generated remote
            content objects, they can include the value of this claim as an ID. If
            the claim is not present, they can use an empty string.</param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.AuthenticationController.GetAuthLogout">
            <summary>
            This method can be used to log out a token, invalidating the token immediately.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.AuthenticationController.GetAuthRefresh(System.String)">
            <summary>
            This method is not currently supported by this adapter.
            </summary>
            <param name="refresh"></param>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Controllers.ContentController">
            <summary>
            For interacting with content.
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.ContentController.#ctor(Microsoft.Extensions.Logging.ILogger{AskDelphi.SampleContentAdapter.Controllers.ContentController},AskDelphi.SampleContentAdapter.ServiceModel.ITopicRepository)">
            <summary></summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.ContentController.GetFolders(System.String)">
            <summary>
            Returns all sub-folders for a folder.
            </summary>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.ContentController.PostSearch(AskDelphi.SampleContentAdapter.DTO.ContentSearchRequest)">
            <summary>
            Used to search for content using specific criteria.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.ContentController.GetMetadata(System.String)">
            <summary>
            Requests metadata of a content item.
            </summary>
            <param name="topicId"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.ContentController.GetContent(System.String)">
            <summary>
            Request all topics and related content topics of a specific content item.
            </summary>
            <param name="topicId"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.ContentController.GetContentLastChangedDate(System.String)">
            <summary>
            Requests the date and time the content identified by the topic id was last changed. If the last changed date is unknown,
            or the content has not been modified, the system may return a null value.
            </summary>
            <param name="topicId">Request topic id</param>
            <returns>A datestamp with timezone indication indicating when the content was last changed.</returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Controllers.ResourcesController">
            <summary>
            For interacting with resources.
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.ResourcesController.#ctor(Microsoft.Extensions.Logging.ILogger{AskDelphi.SampleContentAdapter.Controllers.ContentController},AskDelphi.SampleContentAdapter.ServiceModel.IResourceRepository)">
            <summary>
            
            </summary>    
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.ResourcesController.GetResourcesList(System.String)">
            <summary>
            List all resources in a specific folder.
            </summary>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.ResourcesController.GetResourcesSearch(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Search for resources using certain parameters.
            </summary>
            <param name="query"></param>
            <param name="page"></param>
            <param name="size"></param>
            <param name="continuationToken"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.ResourcesController.GetResourcesMetadata(System.String)">
            <summary>
            Return resource metadata for a specific resource.
            </summary>
            <param name="resourceId"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.ResourcesController.HeadResourcesContent(System.String)">
            <summary>
            HEAD method for partial downloads.
            </summary>
            <param name="resourceId">Target resource id</param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Controllers.ResourcesController.GetResourcesContent(System.String)">
            <summary>
            Gets the resource binary content, supports partial downloads.
            </summary>
            <param name="resourceId">Target resource id</param>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.APIResponseBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.DTO.APIResponseBase.operationContext">
            <summary></summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.APIResponseBase.Success">
            <summary>
            True if the operation succeeded, false otherwise.
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.APIResponseBase.Version">
            <summary>
            API version used.
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.APIResponseBase.Id">
            <summary>
            The identifier for the operation.
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.APIResponseBase.Code">
            <summary>
            When success is false, this contains the unique error code for the failure.
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.APIResponseBase.Message">
            <summary>
            When success is false, this contains the error message containing more details about what failed.
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.APIResponseBase.#ctor(System.String,AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary></summary>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.AuthLoginResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.AuthLoginResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.AuthLoginResponse.Token">
            <summary>
            A valid JWT token created just for this application.
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.AuthLoginResponse.Refresh">
            <summary>
            Not supporting refresh tokens
            </summary>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.AuthLogoutResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.AuthLogoutResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.AuthRefreshResponse">
            <summary></summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.AuthRefreshResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.AuthRefreshResponse.Token">
            <summary>
            
            </summary>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.ContentContentResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ContentContentResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ContentContentResponse.Contents">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ContentContentResponse.Initialize(AskDelphi.SampleContentAdapter.ServiceModel.SCR{AskDelphi.SampleContentAdapter.DTO.TopicContent[]})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.ContentFoldersResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ContentFoldersResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ContentFoldersResponse.Folders">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ContentFoldersResponse.Initialize(AskDelphi.SampleContentAdapter.ServiceModel.SCR{System.Collections.Generic.IEnumerable{AskDelphi.SampleContentAdapter.DTO.FolderDescriptor}})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.ContentLastChangedDateResponse">
            <summary>
            Indicates the utc date when the content was last changed
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ContentLastChangedDateResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary></summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ContentLastChangedDateResponse.LastChangedDate">
            <summary>
            Indicates the utc date when the content was last changed
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ContentLastChangedDateResponse.Initialize(AskDelphi.SampleContentAdapter.ServiceModel.SCR{System.Nullable{System.DateTimeOffset}})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.ContentMetadataResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ContentMetadataResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ContentMetadataResponse.Meta">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ContentMetadataResponse.Initialize(AskDelphi.SampleContentAdapter.ServiceModel.SCR{AskDelphi.SampleContentAdapter.DTO.TopicMetadata})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.ContentSearchResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ContentSearchResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ContentSearchResponse.TotalCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ContentSearchResponse.ContinuationToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ContentSearchResponse.Topics">
            <summary>
            
            </summary>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.ErrorResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ErrorResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.ResourceContentResponse">
            <summary>
            Resource content response
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ResourceContentResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary></summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ResourceContentResponse.Initialize(AskDelphi.SampleContentAdapter.ServiceModel.SCR{AskDelphi.SampleContentAdapter.ServiceModel.DTO.ResourceContent})">
            <summary></summary>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.ResourcesListResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ResourcesListResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ResourcesListResponse.Folders">
            <summary>
            
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ResourcesListResponse.Resources">
            <summary>
            
            </summary>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.ResourcesMetadataResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ResourcesMetadataResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ResourcesMetadataResponse.Meta">
            <summary>
            
            </summary>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.DTO.ResourcesSearchResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.DTO.ResourcesSearchResponse.#ctor(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ResourcesSearchResponse.TotalCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ResourcesSearchResponse.Page">
            <summary>
            
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ResourcesSearchResponse.ContinuationToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.DTO.ResourcesSearchResponse.Resouces">
            <summary>
            
            </summary>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Filters.GlobalRequestFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Filters.GlobalRequestFilter.#ctor(Microsoft.Extensions.Logging.ILogger{AskDelphi.SampleContentAdapter.Filters.GlobalRequestFilter},AskDelphi.SampleContentAdapter.Services.IOperationContextFactory)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="operationContextFactory"></param>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Filters.GlobalRequestFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Filters.GlobalRequestFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.HostedServices.CacheSynchronizationService">
            <summary>
            
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.HostedServices.CacheSynchronizationService.InitialDelay">
            <summary>
            Delay before the first update cycle is is started on the content repository.
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.HostedServices.CacheSynchronizationService.Interval">
            <summary>
            Interval between updates of the content repository.
            </summary>
            
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.HostedServices.CacheSynchronizationService.#ctor(Microsoft.Extensions.Logging.ILogger{AskDelphi.SampleContentAdapter.HostedServices.CacheSynchronizationService},AskDelphi.SampleContentAdapter.Services.IOperationContextFactory,Microsoft.Extensions.Configuration.IConfiguration,AskDelphi.SampleContentAdapter.ServiceModel.ITopicRepository)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.HostedServices.CacheSynchronizationService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.HostedServices.CacheSynchronizationService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.HostedServices.CacheSynchronizationService.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.HttpContextExtensions">
            <summary></summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.HttpContextExtensions.GetOperationContext(Microsoft.AspNetCore.Http.HttpContext)">
            <summary></summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.HttpContextExtensions.SetOperationContext(Microsoft.AspNetCore.Http.HttpContext,AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary></summary>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Services.Cache.CacheKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.Services.Cache.CacheKey.Region">
            <summary>
            Identifies the region in the cache where the data is to be stored. Is considered part of the key, and may be used bu the implementation to select the appropriate cache region to store the data in.
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.Cache.CacheKey.AsString">
            <summary>
            Returns a string that's unique for this cache key instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Services.Cache.IMemoryCacheService">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.Cache.IMemoryCacheService.GetAsync``1(AskDelphi.SampleContentAdapter.Services.Cache.CacheKey)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.Cache.IMemoryCacheService.SetWithAbsoluteExpirationAsync``1(AskDelphi.SampleContentAdapter.Services.Cache.CacheKey,``0,System.DateTimeOffset)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiresAt"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.Cache.IMemoryCacheService.SetWithSlidingExpiration``1(AskDelphi.SampleContentAdapter.Services.Cache.CacheKey,``0,System.TimeSpan)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireAfter"></param>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Services.Cache.MemoryCacheService">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.Cache.MemoryCacheService.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            
            </summary>
            <param name="memoryCache"></param>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.Cache.MemoryCacheService.GetAsync``1(AskDelphi.SampleContentAdapter.Services.Cache.CacheKey)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.Cache.MemoryCacheService.SetWithAbsoluteExpirationAsync``1(AskDelphi.SampleContentAdapter.Services.Cache.CacheKey,``0,System.DateTimeOffset)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiresAt"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.Cache.MemoryCacheService.SetWithSlidingExpiration``1(AskDelphi.SampleContentAdapter.Services.Cache.CacheKey,``0,System.TimeSpan)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireAfter"></param>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Services.IAuthenticationService">
            <summary>
            Authentication services.
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.IAuthenticationService.Login(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext,AskDelphi.SampleContentAdapter.DTO.AuthLoginResponse,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues},AskDelphi.SampleContentAdapter.DTO.ClaimTuple[])">
            <summary>
            Requests a session to be logged in. Upon success, will update the response object with a JWT object containing information about the logged-in session.
            </summary>
            <remarks>
            The authorization header will have to contain the value Bearer {login}:{password}. The login-password options supported are stored as Keys:{login} = {password} properties in the application configuration.
            </remarks>
            <param name="operationContext">Context for the operation.</param>
            <param name="response">Response object that can be returned on the API.</param>
            <param name="authHeader">The authentication header containing the Authorization header value for the login request.</param>
            <param name="claims">Optional list of additional claims that can be requested to be included in the resulting JWT object. This can be used to encode additional information that is relevant to the current session and can be communicated to all other operations via the claims. The caller of this API will always include a special claim of type http://tempuri.org/askdelphi/remote-system-id with a string value. This special claim provides the system with an identification of itself inside the AskDelphi environment.</param>
            <returns>true upon success, false otherwise</returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.IAuthenticationService.Logout(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext,AskDelphi.SampleContentAdapter.DTO.AuthLogoutResponse)">
            <summary>
            Requests the session to be logged out.
            </summary>
            <param name="operationContext">Operation context containing the session information.</param>
            <param name="response">Response object that can be returned on the API.</param>
            <returns>true upon success, false otherwise</returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.IAuthenticationService.Refresh(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext,AskDelphi.SampleContentAdapter.DTO.AuthRefreshResponse,System.String)">
            <summary>
            Requests a new JWT object to be created for the same session that's currently used. Implementing this method is optional. If not implemented, the method will return a null-token and return false.
            </summary>
            <param name="operationContext">Operation context containing the session information.</param>
            <param name="response">Response object that can be returned on the API.</param>
            <param name="refreshToken">The refresh token that was generated when the JWT object was first returned.</param>
            <returns>true upon success, false otherwise</returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Services.IOperationContextFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.IOperationContextFactory.CreateOperationContext(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.IOperationContextFactory.CreateBackgroundOperationContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Services.ITokenService">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.ITokenService.GenerateToken(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext,System.String,AskDelphi.SampleContentAdapter.DTO.ClaimTuple[])">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
            <param name="purpose"></param>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.ITokenService.InvalidateToken(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.ITokenService.Refresh(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext,System.String)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.ITokenService.ValidateToken(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Services.AuthenticationService">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.AuthenticationService.#ctor(Microsoft.Extensions.Logging.ILogger{AskDelphi.SampleContentAdapter.Services.AuthenticationService},Microsoft.Extensions.Configuration.IConfiguration,AskDelphi.SampleContentAdapter.Services.ITokenService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="configuration"></param>
            <param name="tokenService"></param>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.AuthenticationService.Login(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext,AskDelphi.SampleContentAdapter.DTO.AuthLoginResponse,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues},AskDelphi.SampleContentAdapter.DTO.ClaimTuple[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.AuthenticationService.Logout(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext,AskDelphi.SampleContentAdapter.DTO.AuthLogoutResponse)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.AuthenticationService.Refresh(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext,AskDelphi.SampleContentAdapter.DTO.AuthRefreshResponse,System.String)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
            <param name="response"></param>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Services.TokenService">
            <summary>
            
            </summary>
        </member>
        <member name="F:AskDelphi.SampleContentAdapter.Services.TokenService.TokenLifetime">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.TokenService.#ctor(Microsoft.Extensions.Logging.ILogger{AskDelphi.SampleContentAdapter.Services.TokenService},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.TokenService.GenerateToken(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext,System.String,AskDelphi.SampleContentAdapter.DTO.ClaimTuple[])">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
            <param name="purpose"></param>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.TokenService.InvalidateToken(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.TokenService.Refresh(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext,System.String)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.TokenService.ValidateToken(AskDelphi.SampleContentAdapter.ServiceModel.IOperationContext)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Services.OperationContextFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.OperationContextFactory.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.OperationContextFactory.CreateBackgroundOperationContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.OperationContextFactory.CreateOperationContext(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.Services.OperationContextFactory.OperationContext.OperationId">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.OperationContextFactory.OperationContext.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.OperationContextFactory.OperationContext.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.OperationContextFactory.OperationContext.GetAuthToken">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.OperationContextFactory.OperationContext.GetAskDelphiSystemID">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.OperationContextFactory.OperationContext.InitializeFromRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Services.OperationContextFactory.OperationContext.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AskDelphi.SampleContentAdapter.Startup">
            <summary></summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary></summary>
        </member>
        <member name="P:AskDelphi.SampleContentAdapter.Startup.Configuration">
            <summary></summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary></summary>
        </member>
        <member name="M:AskDelphi.SampleContentAdapter.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary></summary>
        </member>
    </members>
</doc>
